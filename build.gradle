import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

group 'co.rsk'
version '1.3.0'

buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    test {
        java.srcDirs = ['src/test/java']
    }
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

dependencies {
    testCompile group: 'com.google.guava', name: 'guava-testlib', version: '18.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    jmhCompile 'org.openjdk.jmh:jmh-core:1.22'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.22'
    compile group: 'net.java.dev.jna', name:'jna', version:'5.6.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

task generatePom(dependsOn: jar) {
    def jarName = jar.outputs.files.singleFile.name
    def pomFile = "${project.buildDir}/${libsDirName}/${jarName.take(jarName.lastIndexOf('.'))}.pom"
    ext.file = new File(pomFile)
    doLast {
        pom {
            project {
                groupId project.group
                artifactId project.name
                version project.version
                licenses {
                    license {
                        name 'GNU General Public License (GPL) version 3.0'
                        url 'http://www.gnu.org/licenses/gpl-3.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo(pomFile)
    }
}

def stripJar(File originalFile) {
    def constantTimeForZipEntries = new GregorianCalendar(1980, Calendar.FEBRUARY, 1, 0, 0, 0).timeInMillis
    def reproducibleFile = File.createTempFile("temp", ".tmp")
    reproducibleFile.withOutputStream { fout ->
        def out = new JarOutputStream(fout)
        def jf = new JarFile(originalFile)
        jf.entries().unique {it.name}.sort {it.name}.each {
            def copy = new JarEntry(it.name)
            copy.time = constantTimeForZipEntries
            out.putNextEntry(copy)
            out << jf.getInputStream(it)
        }
        out.finish()
    }
    reproducibleFile.renameTo originalFile
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}


artifacts {
    archives jar
    archives(generatePom.file) {
        type 'text'
        builtBy generatePom
    }
    archives sourcesJar
    archives javadocJar
}

task buildProject(group: 'build', description: 'builds libraries for supported OSs and packages them into productive jar') {
    dependsOn 'buildAltbn128'
    dependsOn 'buildSecp256k1'
    dependsOn 'buildBls12_381'
    finalizedBy 'build'
}

// Enabling reproducibility

tasks.withType(Jar) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    doLast {
        stripJar(outputs.files.singleFile)
    }
}

// Build tasks

task buildAltbn128(group: 'build', description: 'builds altbn128 library') {
    doLast {
        exec {
            workingDir 'altbn128'
            commandLine './build.sh'
        }
    }
}

task buildSecp256k1(group: 'build', description: 'builds secp256k1 library') {
    dependsOn 'generateSecp256k1JniHeaders'
    dependsOn 'replaceSecp256k1JniHeaders'
    doLast {
        exec {
            workingDir 'secp256k1'
            commandLine './build.sh'
        }
    }
}

task buildBls12_381(group: 'build', description: 'builds BLS12_381 library') {
    doLast {
        exec {
            workingDir 'bls12_381'
            commandLine './build.sh'
        }
    }
}

// Aux

task generateSecp256k1JniHeaders(group: 'JNI', type: JavaCompile, description: 'generates JNI headers (.h) by java sources') {
    doFirst {
        exec {
            commandLine "mkdir", "-p", "build/generated/jni-tmp"
        }
    }
    classpath = sourceSets.main.compileClasspath
    destinationDir file("${buildDir}/generated/jni")
    source = sourceSets.main.java
    options.compilerArgs += [
            '-h', file("${buildDir}/generated/jni"),
            '-d', file("${buildDir}/generated/jni-tmp")
    ]
    doLast {
        delete file("${buildDir}/generated/jni-tmp")
    }
}

task replaceSecp256k1JniHeaders(group: 'JNI', description: 'Replaces JNI old headers with generated headers (for each library)') {
    copy {
        from 'build/generated/jni/org_bitcoin_NativeSecp256k1.h'
        into 'secp256k1/jni/'
    }
    copy {
        from 'build/generated/jni/org_bitcoin_Secp256k1Context.h'
        into 'secp256k1/jni/'
    }
}

jar {
    from {
        configurations.compileClasspath.filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }
}