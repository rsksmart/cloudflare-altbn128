use crate::pairings::TwistType;
use crate::representation::*;
use crate::field::*;
use num_bigint::BigUint;
use crate::integers::MaxFieldUint;
use crate::fp::*;
use crate::extension_towers::fp3::*;
use crate::traits::*;
use num_traits::Num;

fn generate_mnt6_spec_params<FE: ElementRepr>(
    modulus: BigUint, 
    a: BigUint,
    b: BigUint,
    main_subgroup_order: BigUint,
    fp_non_residue: BigUint,
    generator_g1_x: BigUint,
    generator_g1_y: BigUint,
    generator_g2_x_0: BigUint,
    generator_g2_x_1: BigUint,
    generator_g2_x_2: BigUint,
    generator_g2_y_0: BigUint,
    generator_g2_y_1: BigUint,
    generator_g2_y_2: BigUint,
    ate_loop_scalar: BigUint,
    ate_loop_scalar_is_negative: bool,
    final_exp_scalar: BigUint,
    w0_exp_scalar: BigUint,
    w0_exp_scalar_is_negative: bool,
    w1_exp_scalar: BigUint,
) {
    let modulus_uint = MaxFieldUint::from_big_endian(&modulus.to_bytes_be());
    let field = field_from_modulus::<FE>(&modulus_uint).unwrap();
    let a_fp = Fp::from_be_bytes(&field, &a.to_bytes_be(), true).unwrap();
    let b_fp = Fp::from_be_bytes(&field, &b.to_bytes_be(), true).unwrap();
    let fp_non_residue = Fp::from_be_bytes(&field, &fp_non_residue.to_bytes_be(), true).unwrap();
    let extension_3 = Extension3::new(fp_non_residue.clone());

    let one = Fp::one(&field);

    let mut twist = Fp3::zero(&extension_3);
    twist.c1 = one.clone();

    let mut twist_squared = twist.clone();
    twist_squared.square();

    let mut twist_cubed = twist_squared.clone();
    twist_cubed.mul_assign(&twist);

    let mut a_fp3 = twist_squared.clone();
    a_fp3.mul_by_fp(&a_fp);

    let mut b_fp3 = twist_cubed.clone();
    b_fp3.mul_by_fp(&b_fp);


    let g1_generator_x = Fp::from_be_bytes(&field, &generator_g1_x.to_bytes_be(), true).unwrap();
    let g1_generator_y = Fp::from_be_bytes(&field, &generator_g1_y.to_bytes_be(), true).unwrap();

    let g1_generator_x_c0 = Fp::from_be_bytes(&field, &generator_g2_x_0.to_bytes_be(), true).unwrap();
    let g1_generator_x_c1 = Fp::from_be_bytes(&field, &generator_g2_x_1.to_bytes_be(), true).unwrap();
    let g1_generator_x_c2 = Fp::from_be_bytes(&field, &generator_g2_x_2.to_bytes_be(), true).unwrap();
    let g1_generator_y_c0 = Fp::from_be_bytes(&field, &generator_g2_y_0.to_bytes_be(), true).unwrap();
    let g1_generator_y_c1 = Fp::from_be_bytes(&field, &generator_g2_y_1.to_bytes_be(), true).unwrap();
    let g1_generator_y_c2 = Fp::from_be_bytes(&field, &generator_g2_y_2.to_bytes_be(), true).unwrap();
    println!("Weierstrass curve parameters with k=6");
    println!("Base field modulus = {}", field.modulus());
    println!("A coefficient = {}", a_fp);
    println!("B coefficient = {}", b_fp);
    println!("Main subgroup order = 0x{}", main_subgroup_order.to_str_radix(16));

    println!("Extension tower:");
    println!("Fp3 construction:");
    println!("Fp cubic non-residue = {}", fp_non_residue);

    println!("A coefficient for twist c0 = {}", a_fp3.c0);
    println!("A coefficient for twist c1 = {}", a_fp3.c1);
    println!("A coefficient for twist c2 = {}", a_fp3.c2);

    println!("B coefficient for twist c0 = {}", b_fp3.c0);
    println!("B coefficient for twist c1 = {}", b_fp3.c1);
    println!("B coefficient for twist c2 = {}", b_fp3.c2);

    println!("Generators:");
    println!("G1:");
    println!("X = {}", g1_generator_x);
    println!("Y = {}", g1_generator_y);

    println!("G2:");
    println!("X c0 = {}", g1_generator_x_c0);
    println!("X c1 = {}", g1_generator_x_c1);
    println!("X c2 = {}", g1_generator_x_c2);
    println!("Y c0 = {}", g1_generator_y_c0);
    println!("Y c1 = {}", g1_generator_y_c1);
    println!("Y c2 = {}", g1_generator_y_c2);

    println!("Pairing parameters:");
    println!("|ate_loop_scalar| (miller loop scalar) = 0x{}", ate_loop_scalar.to_str_radix(16));
    println!("ate_loop_scalar is negative = {}", ate_loop_scalar_is_negative);

    println!("final_exp_scalar (final exponentiation power) = 0x{}", final_exp_scalar.to_str_radix(16));

    println!("Breaking final exponentiation hard part into the two parts (usually labeled w0 and w1)");

    println!("|w0| = 0x{}", w0_exp_scalar.to_str_radix(16));
    println!("w0 is negative = {}", w0_exp_scalar_is_negative);

    println!("|w1| = 0x{}", w1_exp_scalar.to_str_radix(16));
}


#[test]
fn print_ey_pendulum_parameters() {
    let modulus = BigUint::from_str_radix("19050022797317891600939264904924934656417895081121634056186244048763811669585984032184028629480644260294123843823582617865870693473572190965725707704312821545976965077621486794922414287", 10).unwrap();
    let group_order = BigUint::from_str_radix("475922286169261325753349249653048451545124878552823515553267735739164647307408490559963137", 10).unwrap();

    // non-residue is +3
    let fp_non_residue = BigUint::from(3u64);

    let a = BigUint::from(0u64);
    let b = BigUint::from(3779136u64);

    let p_x = BigUint::from_str_radix("10429529130963884009088672788347332381112680208340155261267801535021515284160681139607251964825852124795332292830211013740612118630760054643157598813437729109347416973526597847768430196", 10).unwrap();
    let p_y = BigUint::from_str_radix("16905957489427084020812201420874004139445860435619110387337972510865682281055685071559898890725067816998514457554471177636644195808052025100386087604283564319339703394765085347212298098", 10).unwrap();

    let q_x_0 = BigUint::from_str_radix("13912037883745548354885384080735939137135972624544456324778703816799088874865621783205940029962037178108763091296730317064882342261056217993081826235556952843127200569255758772006603222", 10).unwrap();
    let q_x_1 = BigUint::from_str_radix("0", 10).unwrap();
    let q_x_2 = BigUint::from_str_radix("0", 10).unwrap();

    let q_y_0 = BigUint::from_str_radix("17848446077687999456842554535611770905438459561283772120727453120807955998955357528566232686711238095565974536067108118163952231407922320805847265871073335951065323478695430783920346311", 10).unwrap();
    let q_y_1 = BigUint::from_str_radix("0", 10).unwrap();
    let q_y_2 = BigUint::from_str_radix("0", 10).unwrap();

    let ate = BigUint::from_str_radix("19050022797317891600939264904924934656417895081121634056186244048763811669585984032184028629480168338007954582497829268616217645022027066087172884188759553810237800430314078304362451150", 10).unwrap();
    let ate_is_negative = false;

    let final_exp = BigUint::from_str_radix("100423870617765377462288921991705058064066317441544284495241123579182211596199015851611264231095298339998088763771082746874787805299346743855491714431237761533371754609061885918820013688992199567176740528257075196642520203571395720349075208345116351733410271370221200176246986072404830843366450512893766369356307021152474431528599741498202226004015201673575698774526383309793439778791410813617073875322701411074298623735325647821678998811323097221570247014577699527521316660579585310467502764262886643629279956136589108065749949275502904571054732187489208977384998875130114367813643869701439127571469962838383471719004134141664250354239990346715730264937727465514553571373542401086719861657200622270483688837039467865500870083321548750233771612931970133032178527755565626224514504506456192754852318102059860644159431186965577474145619581368938985932531405729469296392643918817935332526021874413186293408331487941093239399997803417973633666435650866228341242449813102571910623252432186420977607250534445625335582474784", 10).unwrap();

    let w0 = BigUint::from_str_radix("18882571883840774900563563343436885760643859164070784837888459545889142700580885367286044189612745808185152546256306761299542795636596957234150172272931757786521125192466997795000886229", 10).unwrap();
    let w0_is_negative = false;
    let w1 = BigUint::from_str_radix("40027591375585988881374325570481291274861054588565855055039992018070225508664671878855045285090", 10).unwrap();

    generate_mnt6_spec_params::<U640Repr>(
        modulus,
        a,
        b,
        group_order,
        fp_non_residue,
        p_x,
        p_y,
        q_x_0,
        q_x_1,
        q_x_2,
        q_y_0,
        q_y_1,
        q_y_2,
        ate,
        ate_is_negative,
        final_exp,
        w0,
        w0_is_negative,
        w1
    );
}

#[test]
fn print_ey_sw6_bis_parameters() {
    let modulus = BigUint::from_str_radix("6891450384315732539396789682275657542479668912536150109513790160209623422243491736087683183289411687640864567753786613451161759120554247759349511699125301598951605099378508850372543631423596795951899700429969112842764913119068299", 10).unwrap();
    let group_order = BigUint::from_str_radix("258664426012969094010652733694893533536393512754914660539884262666720468348340822774968888139573360124440321458177", 10).unwrap();

    // non-residue is +2
    let fp_non_residue = BigUint::from(2u64);

    let a = BigUint::from(0u64);
    let b = BigUint::from_str_radix("5428247903343207843304490009542442997117969973913823318164330064320104021081180430153151788629347606889122435541645149581251622306618937027915190165889600280602116819284463614893841480114928247406042232431052188770336204942290254", 10).unwrap();

    let p_x = BigUint::from_str_radix("5579967068336365913530314810395365133780834399862286099844214670112509916823249335294962213691537977152362219416893517101994883989493084838175435762233462039369475294964563970855229509232628421518123427796600636650128165679151508", 10).unwrap();
    let p_y = BigUint::from_str_radix("3286106293257681699728332709973922945771547429394479993180335107651349218966829706081783660531045380298579922041512096833422398940161774037026391058614654750408470238881887954061918258846716359094162226636558919540815399302189033", 10).unwrap();

    let q_x_0 = BigUint::from_str_radix("0", 10).unwrap();
    let q_x_1 = BigUint::from_str_radix("0", 10).unwrap();
    let q_x_2 = BigUint::from_str_radix("2762333537634180879188497831180460021045024768964216860077326831768282319295307213190468027456390916014688653832658199933857161399195589808528083537985014526923490693736135387257722421714776391535494333278083320743942589072320465", 10).unwrap();

    let q_y_0 = BigUint::from_str_radix("6381154894827903503049202516448541497527668437176080964419566768101131101581568586920051373882212504439521771700091985568521381031252030757451435249323352844301649858691839209117065545550058565983491476754520157763374643574911714", 10).unwrap();
    let q_y_1 = BigUint::from_str_radix("0", 10).unwrap();
    let q_y_2 = BigUint::from_str_radix("0", 10).unwrap();

    let ate = BigUint::from_str_radix("6891450384315732539396789682275657542479668912536150109513790160209623422243491736087683183289411687640864567753786354786735746151460237106615816805591765205438850184717968966109876910955248455129124731541829539482640472797610122", 10).unwrap();
    let ate_is_negative = false;

    let final_exp = BigUint::from_str_radix("414120851190081857259378940145350857957559993168243292101436486535347107467806118274557843557325028910702591282977055677717179784934937158667585739736274135957119947179274672229952137675351215358786414154809447021601389903058849249956180740529241718879212085712503766864947946026605663395381450048308422396237123218798227193109519343275683314075860379350896921476723748271268458882462692568332631752289700097002045301296223372458293764434701950420210421715000131013980234881438585729277162712365054040927527479267564012274462728109348776756595766165627114213448725413038547637569495361079248349231297636997111755969684221288359818271693104882768483818996611430102893654553413082460832591443507134248207058064236465653945427795555589686925914139903467405281128720290325448429710297756756712477520844506970433659101005435238626369875843069961517840661170857661265550121820426065701082282309656905184495939454532818839387869011877715974614992299600773124822953681729343211729158584094701247610275434353440208893937178948454546809228173671015895702635689980844340167854010716240140417687462852252840200256248355635867968532779336190285724662667718441288196836598576766668991221618805280949647788766988939944453753742556685039123899111760770924773432347181567842600", 10).unwrap();

    let w0 = BigUint::from_str_radix("2156695813352724974824326851054479880127610960548355747044807332080688727374737671308314095389122345740953981240668571898337613282699493372314698360451061276517306188376803619985090458895588556562724088277106828", 10).unwrap();
    let w0_is_negative = false;
    let w1 = BigUint::from_str_radix("26642435879335816683987677701488073867751118270052650655942102502312977592501693353047140953112195348280268661194889", 10).unwrap();

    generate_mnt6_spec_params::<U768Repr>(
        modulus,
        a,
        b,
        group_order,
        fp_non_residue,
        p_x,
        p_y,
        q_x_0,
        q_x_1,
        q_x_2,
        q_y_0,
        q_y_1,
        q_y_2,
        ate,
        ate_is_negative,
        final_exp,
        w0,
        w0_is_negative,
        w1
    );
}